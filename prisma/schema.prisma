// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum RefundType {
  POINT
  BANK
}

model Users {
  id                Int                 @id @default(autoincrement())
  role              Role                @default(USER)
  name              String?
  email             String              @unique
  password          String
  phone             String?
  identityNumber    String?             @map("identity_number")
  branchNumber      String?             @map("branch_number")
  refund            RefundType?
  point             Int                 @default(0)
  shippingAddresses ShippingAddresses[]
  products          Products[]
  favorites         Favorites[]
}

model ShippingAddresses {
  id             Int     @id @default(autoincrement())
  firstName      String  @map("first_name")
  lastName       String  @map("last_name")
  phone          String
  email          String?
  identityNumber String? @map("identity_number")
  company        String?
  branch         String?
  address        String?
  apartment      String?
  postalCode     String  @map("postal_code")
  province       String
  district       String
  subDistrict    String  @map("sub_district")
  isMainAddress  Boolean @map("is_main_address")
  user           Users   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         Int     @map("user_id")

  @@map("shipping_address")
}

model Favorites {
  id                Int                 @id @default(autoincrement())
  name              String
  user              Users               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            Int                 @map("user_id")
  favoriteProducts Favorite_Products[]
}

model Favorite_Products {
  id         Int       @id @default(autoincrement())
  favorite   Favorites @relation(fields: [favoriteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  favoriteId Int       @map("favorite_id")
  product    Products  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId  Int       @map("product_id")
}

model Products {
  id                Int                 @id @default(autoincrement())
  stock             Int                 @default(0)
  unit              Int                 @default(1)
  priceHigh         Int                 @map("price_high")
  minPriceHigh      Int                 @map("min_price_high")
  priceMedium       Int?                @map("price_medium")
  minPriceMedium    Int?                @map("min_price_medium")
  priceLow          Int?                @map("price_low")
  minPriceLow       Int?                @map("min_price_low")
  detail            String
  width             Decimal
  height            Decimal
  depth             Decimal
  weight            Decimal
  user              Users               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            Int                 @map("user_id")
  favoriteProducts Favorite_Products[]
}
